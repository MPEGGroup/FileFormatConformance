{
  "description": "Boxes (also called atoms)",
  "entries": [
    {
      "fourcc": "iroi",
      "description": "SVC region of interest box",
      "containers": [
        "scif"
      ],
      "type": "Box",
      "syntax": "class IroiInfoBox extends Box('iroi'){\n\tunsigned int(2) iroi_type;\n\tbit(6) reserved = 0;\n\tif(iroi_type == 0) { \n\t\tunsigned int(8) grid_roi_mb_width;\n\t\tunsigned int(8) grid_roi_mb_height;\n\t}\n\telse if(iroi_type == 1){\n\t\tunsigned int(24) num_roi;\n\t\tfor(int i=1; i<= num_roi; i++) {\n\t\t\tunsigned int(32) top_left_mb;\n\t\t\tunsigned int(8) roi_mb_width;\n\t\t\tunsigned int(8) roi_mb_height;\n\t\t}\n\t}\n}"
    },
    {
      "fourcc": "ldep",
      "description": "Tier dependency box",
      "containers": [
        "scif",
        "mvif"
      ],
      "type": "Box",
      "syntax": "class TierDependencyBox extends Box('ldep'){\n\tunsigned int(16) entry_count; \n\tfor (i=0; i < entry_count; i++)\n\t\tunsigned int(16) dependencyTierId;\n}"
    },
    {
      "fourcc": "svdr",
      "description": "SVC dependency range",
      "containers": [
        "scif"
      ],
      "type": "Box",
      "syntax": "class SVCDependencyRangeBox extends Box('svdr') {\n\tunsigned int(3) min_dependency_id;\n\tunsigned int(3) min_temporal_id;\n\tbit(6) reserved = 0;\n\tunsigned int(4) min_quality_id;\n\tunsigned int(3) max_dependency_id;\n\tunsigned int(3) max_temporal_id;\n\tbit(6) reserved = 0;\n\tunsigned int(4) max_quality_id;\n}"
    },
    {
      "fourcc": "svip",
      "description": "Initial parameter sets box for tiers",
      "containers": [
        "scif",
        "mvif"
      ],
      "type": "Box",
      "syntax": "class InitialParameterSetBox extends Box ('svip') {\n\tunsigned int(8) sps_id_count;\n\tfor (i=0; i< sps_id_count; i++)\n\t\tunsigned int(8) SPS_index;\n\tunsigned int(8) pps_id_count;\n\tfor (i=0; i< pps_id_count; i++)\n\t\tunsigned int(8) PPS_index;\n}"
    },
    {
      "fourcc": "svpr",
      "description": "Priority range",
      "containers": [
        "scif",
        "mvif"
      ],
      "type": "Box",
      "syntax": "class PriorityRangeBox extends Box('svpr') {\n\tbit(2) reserved1 = 0;\n\tunsigned int(6) min_priorityId;\n\tbit(2) reserved2 = 0;\n\tunsigned int(6) max_priorityId;\n}"
    },
    {
      "fourcc": "tran",
      "description": "SVC lightweight transcoding",
      "containers": [
        "scif"
      ],
      "type": "Box",
      "syntax": "class TranscodingInfoBox extends Box('tran'){\n\tbit(4) reserved = 0;\n\tunsigned int(2) conversion_idc;\n\tunsigned int(1) cavlc_info_present_flag;\n\tunsigned int(1) cabac_info_present_flag;\n\tif(cavlc_info_present_flag){\n\t\tunsigned int(24) cavlc_profile_level_idc;\n\t\tunsigned int(32) cavlc_max_bitrate;\n\t\tunsigned int(32) cavlc_avg_bitrate;\n\t}\n\tif(cabac_info_present_flag){\n\t\tunsigned int(24) cabac_profile_level_idc;\n\t\tunsigned int(32) cabac_max_bitrate;\n\t\tunsigned int(32) cabac_avg_bitrate;\n\t}\n}"
    },
    {
      "fourcc": "rrgn",
      "description": "SVC rect region box",
      "containers": [
        "scif"
      ],
      "type": "Box",
      "syntax": "class RectRegionBox extends Box('rrgn'){\n\tunsigned int(16) base_region_tierID;\n\tunsigned int(1) dynamic_rect;\n\tbit(7) reserved = 0;\n\tif(dynamic_rect == 0) { \n\t\tunsigned int(16) horizontal_offset;\n\t\tunsigned int(16) vertical_offset;\n\t\tunsigned int(16) region_width;\n\t\tunsigned int(16) region_height;\n\t}\n}"
    },
    {
      "fourcc": "buff",
      "description": "Buffering information",
      "containers": [
        "scif",
        "mvif",
        "mvcg"
      ],
      "type": "Box",
      "syntax": "class BufferingBox extends Box('buff'){\n\tunsigned int(16) \t\toperating_point_count\n\tfor (i = 0; i < operating_point_count; i++){\n\t\tunsigned int (32) \tbyte_rate\n\t\tunsigned int (32) \tcpb_size\n\t\tunsigned int (32) \tdpb_size\n\t\tunsigned int (32)\t\tinit_cpb_delay\n\t\tunsigned int (32) \tinit_dpb_delay\n\t}\n}"
    },
    {
      "fourcc": "mstv",
      "description": "MVC sub track view box",
      "containers": [
        "strd"
      ],
      "type": "FullBox",
      "versions": [
        0
      ],
      "flags": [],
      "syntax": "aligned(8) class MVCSubTrackViewBox\n\textends FullBox('mstv', 0, 0) {\n\tunsigned int(16) item_count;\n\tfor(i = 0; i< item_count; i++) {\n\t\tunsigned int(10)\tview_id;\n\t\tunsigned int(4)\ttemporal_id;\n\t\tunsigned int(2)\treserved;\n\t}\n}"
    },
    {
      "fourcc": "mvcg",
      "description": "Multiview group",
      "containers": [
        "mvci"
      ],
      "type": "FullBox",
      "versions": [
        0
      ],
      "flags": [],
      "syntax": "aligned(8) class MultiviewGroupBox extends FullBox('mvcg', version = 0, flags) {\n\tunsigned int(32) multiview_group_id;\n\tunsigned int(16) num_entries;\n\tbit(8) reserved = 0;\n\tfor(i=0; i<num_entries; i++) {\n\t\tunsigned int(8) entry_type;\n\t\tif (entry_type == 0)\n\t\t\tunsigned int(32) track_id;\n\t\telse if (entry_type == 1) {\n\t\t\tunsigned int(32) track_id;\n\t\t\tunsigned int(16) tier_id;\n\t\t}\n\t\telse if (entry_type == 2) {\n\t\t\tbit(6) reserved1 = 0;\n\t\t\tunsigned int(10) output_view_id;\n\t\t}\n\t\telse if (entry_type == 3) {\n\t\t\tbit(6) reserved2 = 0;\n\t\t\tunsigned int(10) start_view_id;\n\t\t\tunsigned int(16) view_count;\n\t\t}\n\t}\n\tTierInfoBox subset_stream_info; \t\t\t// optional\n\tMultiviewRelationAttributeBox relation_attributes; // optional\n\tTierBitRateBox subset_stream_bit_rate; // optional\n\tBufferingBox subset_stream_buffering; \t// optional\n\tMultiviewSceneInfoBox multiview_scene_info; \t\t\t// optional\n}"
    },
    {
      "fourcc": "mvci",
      "description": "Multiview Information",
      "containers": [
        "minf"
      ],
      "type": "FullBox",
      "versions": [
        0
      ],
      "flags": [],
      "syntax": "aligned(8) class MultiviewInformationBox\n\textends FullBox('mvci', version = 0, flags) {\n}"
    },
    {
      "fourcc": "3dpr",
      "description": "MVDDepthResolutionBox",
      "containers": [
        "mvdC",
        "a3dC"
      ],
      "type": "Box",
      "syntax": "class MVDDepthResolutionBox extends Box('3dpr')\n{\n\tunsigned int(16) depth_width;\n\tunsigned int(16) depth_height;\n/* The following 5 fields are collectively optional; they are either all present or all absent. When grid_pos_num_views is not present, the for loop is not present, equivalent to grid_pos_num_views equal to 0. These fields may be present or absent whenever the box is present (e.g., in MVCDConfigurationBox or A3DConfigurationBox). */\n\tunsigned int(16) depth_hor_mult_minus1; // optional\n\tunsigned int(16) depth_ver_mult_minus1; // optional\n\tunsigned int(4) depth_hor_rsh; // optional\n\tunsigned int(4) depth_ver_rsh; // optional\n\tunsigned int(16) grid_pos_num_views; // optional\n\tfor(i = 0; i < grid_pos_num_vies; i++) {\n\t\tbit(6) reserved=0;\n\t\tunsigned int(10) grid_pos_view_id[i];\n\t\tsigned int(16) grid_pos_x[grid_pos_view_id[i]];\n\t\tsigned int(16) grid_pos_y[grid_pos_view_id[i]];\n\t}\n}"
    },
    {
      "fourcc": "mvra",
      "description": "Multiview Relation Attribute",
      "containers": [
        "mvcg",
        "swtc"
      ],
      "type": "FullBox",
      "versions": [
        0
      ],
      "flags": [],
      "syntax": "aligned(8) class MultiviewRelationAttributeBox\n\textends FullBox('mvra', version = 0, flags) {\n\tbit(16) reserved1 = 0;\n\tunsigned int(16) num_common_attributes;\n\tfor (i=0; i<num_common_attributes; i++) {\n\t\tunsigned int(32) common_attribute; \n\t\tunsigned int(32) common_value;\n\t}\n\tbit(16) reserved2 = 0;\n\tunsigned int(16) num_differentiating_attributes;\n\tfor (i=0; i<num_differentiating_attributes; i++)\n\t\tunsigned int(32) differentiating_attribute;\n}"
    },
    {
      "fourcc": "sdep",
      "description": "Sample dependency",
      "containers": [
        "stbl"
      ],
      "type": "FullBox",
      "versions": [
        0
      ],
      "flags": [],
      "syntax": "aligned(8) class SampleDependencyBox \n\textends FullBox('sdep', version = 0, 0) {\n\tfor (i=0; i < sample_count; i++){\n\t\tunsigned int(16) dependency_count;\n\t\tfor (k=0; k < dependency_count; k++) {\n\t\t\tsigned int(16) relative_sample_number;\n\t\t}\n\t}\n}"
    },
    {
      "fourcc": "seii",
      "description": "SEI information box",
      "containers": [
        "schi",
        "VisualSampleEntry"
      ],
      "type": "Box",
      "syntax": "aligned(8) class SeiInformationBox extends Box('seii') {\n\tunsigned int(16) numRequiredSEIs;\n\tfor (i\u00a0=\u00a00; i\u00a0<\u00a0numRequiredSEIs; i++) {\n\tunsigned int(16) requiredSEI_ID;\n\t}\n\tunsigned int(16) numNotRequiredSEIs;\n\tfor (i\u00a0=\u00a00; i\u00a0<\u00a0numNotRequiredSEIs; i++) {\n\tunsigned int(16) notrequiredSEI_ID;\n\t}\n}"
    },
    {
      "fourcc": "sstl",
      "description": "SVC sub track layer box",
      "containers": [
        "strd"
      ],
      "type": "FullBox",
      "versions": [
        0
      ],
      "flags": [],
      "syntax": "aligned(8) class SVCSubTrackLayerBox\n\textends FullBox('sstl', 0, 0) {\n\tunsigned int(16) item_count;\n\tfor(i = 0; i< item_count; i++) {\n\t\tunsigned int(3)\tdependency_id;\n\t\tunsigned int(4)\tquality_id;\n\t\tunsigned int(3)\ttemporal_id;\n\t\tunsigned int(6)\tpriority_id;\n\t\tunsigned int(2)\tdependency_id_range;\n\t\tunsigned int(2) \tquality_id_range;\n\t\tunsigned int(2)\ttemporal_id_range;\n\t\tunsigned int(2)\tpriority_id_range;\n\t}\n}"
    },
    {
      "fourcc": "stmg",
      "description": "MVC sub track multiview group box",
      "containers": [
        "strd"
      ],
      "type": "FullBox",
      "versions": [
        0
      ],
      "flags": [],
      "syntax": "aligned(8) class MVCSubTrackMultiviewGroupBox\n\textends FullBox('stmg', 0, 0) {\n\tunsigned int(16) item_count;\n\tfor(i = 0; i< item_count; i++) {\n\t\tunsigned int(32)\tMultiviewGroupId;\n\t}\n}"
    },
    {
      "fourcc": "stti",
      "description": "Sub track tier box",
      "containers": [
        "strd"
      ],
      "type": "FullBox",
      "versions": [
        0
      ],
      "flags": [],
      "syntax": "aligned(8) class SubTrackTierBox\n\textends FullBox('stti', 0, 0) {\n\tunsigned int(16) item_count;\n\tfor(i = 0; i< item_count; i++) {\n\t\tunsigned int(16)\ttierID;\n\t}\n}"
    },
    {
      "fourcc": "swtc",
      "description": "Multiview Group Relation",
      "containers": [
        "mvci"
      ],
      "type": "FullBox",
      "versions": [
        0
      ],
      "flags": [],
      "syntax": "aligned(8) class MultiviewGroupRelationBox() extends FullBox('swtc', version = 0, flags) {\n\tunsigned int(32) num_entries;\n\tfor (i=0; i<num_entries; i++)\n\t\tunsigned int(32) multiview_group_id;\n\tMultiviewRelationAttributeBox relation_attributes;\n}"
    },
    {
      "fourcc": "tibr",
      "description": "Tier Bit rate",
      "containers": [
        "scif",
        "mvif",
        "mvcg"
      ],
      "type": "Box",
      "syntax": "class TierBitRateBox extends Box('tibr'){ \n\tunsigned int(32) baseBitRate;\n\tunsigned int(32) maxBitRate;\n\tunsigned int(32) avgBitRate;\n\n\tunsigned int(32) tierBaseBitRate;\n\tunsigned int(32) tierMaxBitRate;\n\tunsigned int(32) tierAvgBitRate;\n}"
    },
    {
      "fourcc": "tiri",
      "description": "Tier Information",
      "containers": [
        "scif",
        "mvif",
        "mvcg"
      ],
      "type": "Box",
      "syntax": "class TierInfoBox extends Box('tiri'){ //Mandatory Box\n\tunsigned int(16) tierID;\n\tunsigned int(8) profileIndication;\n\tunsigned int(8) profile_compatibility;\n\tunsigned int(8) levelIndication;\n\tbit(8) reserved = 0;\n\n\tunsigned int(16) visualWidth;\n\tunsigned int(16) visualHeight;\n\n\tunsigned int(2) discardable;\n\tunsigned int(2) constantFrameRate;\n\tbit(4) reserved = 0;\n\tunsigned int(16) frameRate;\n}"
    },
    {
      "fourcc": "tstb",
      "description": "TileSubTrackGroupBox",
      "containers": [
        "strd"
      ],
      "type": "FullBox",
      "versions": [
        0
      ],
      "flags": [],
      "syntax": "aligned(8) class TileSubTrackGroupBox extends FullBox('tstb', 0, 0) {\n\tunsigned int(16) item_count;\n\tfor(i = 0; i< item_count; i++) {\n\t\tunsigned int(16) tileGroupID;\n\t}\n}"
    },
    {
      "fourcc": "vwdi",
      "description": "Multiview Scene Information",
      "containers": [
        "mvcg"
      ],
      "type": "Box",
      "syntax": "class MultiviewSceneInfoBox extends Box ('vwdi') \n{\n\tunsigned int(8) \tmax_disparity;\n}"
    },
    {
      "fourcc": "vwid",
      "description": "View identifier",
      "containers": [
        "mvif",
        {
          "VisualSampleEntry": [
            "avc1",
            "avc2",
            "avc3",
            "avc4",
            "mvc1",
            "mvc2",
            "mvc3",
            "mvc4",
            "mvd1",
            "mvd2",
            "mvd3",
            "mvd4",
            "a3d1",
            "a3d2",
            "a3d3",
            "a3d4"
          ]
        }
      ],
      "type": "FullBox",
      "versions": [
        0
      ],
      "flags": [],
      "syntax": "class ViewIdentifierBox extends FullBox ('vwid', version=0, flags) \n{\n\tunsigned int(2) \treserved6 = 0;\n\tunsigned int(3) \tmin_temporal_id;\n\tunsigned int(3) \tmax_temporal_id;\n\tunsigned int(16)\tnum_views;\n\tfor (i=0; i<num_views; i++) {\n\t\tunsigned int(6) \treserved1 = 0;\n\t\tunsigned int(10) \tview_id[i];\n\t\tunsigned int(6) \treserved2 = 0;\n\t\tunsigned int(10) \tview_order_index;\n\t\tunsigned int(1)\ttexture_in_stream[i];\n\t\tunsigned int(1)\ttexture_in_track[i];\n\t\tunsigned int(1)\tdepth_in_stream[i];\n\t\tunsigned int(1)\tdepth_in_track[i];\n\t\tunsigned int(2) \tbase_view_type;\n\t\tunsigned int(10) \tnum_ref_views;\n\t\tfor (j = 0; j < num_ref_views; j++) {\n\t\t\tunsigned int(4) \treserved5 = 0;\n\t\t\tunsigned int(2) \tdependent_component_idc[i][j];\n\t\t\tunsigned int(10) \tref_view_id[i][j];\n\t\t}\n\t}\n}"
    },
    {
      "fourcc": "avcC",
      "description": "AVC Configuration",
      "containers": [
        "ipco",
        {
          "VisualSampleEntry": [
            "resv",
            "encv",
            "avc1",
            "avc2",
            "avc3",
            "avc4",
            "avcp"
          ]
        }
      ],
      "type": "Box",
      "syntax": "class AVCConfigurationBox extends Box('avcC') {\n\tAVCDecoderConfigurationRecord() AVCConfig;\n}"
    },
    {
      "fourcc": "hvcC",
      "description": "HEVC Configuration",
      "containers": [
        "ipco",
        {
          "VisualSampleEntry": [
            "resv",
            "encv",
            "hvc1",
            "hev1",
            "hvc2",
            "hev2",
            "hvc3",
            "hev3"
          ]
        }
      ],
      "type": "Box",
      "syntax": "class HEVCConfigurationBox extends Box('hvcC') {\n\tHEVCDecoderConfigurationRecord() HEVCConfig;\n}"
    },
    {
      "fourcc": "lhvC",
      "description": "Layered HEVC Configuration",
      "containers": [
        "ipco",
        {
          "VisualSampleEntry": [
            "resv",
            "encv",
            "lhv1",
            "lhe1"
          ]
        }
      ],
      "type": "Box",
      "syntax": "class LHEVCConfigurationBox extends Box('lhvC') {\n\tLHEVCDecoderConfigurationRecord() LHEVCConfig;\n}"
    }
  ]
}